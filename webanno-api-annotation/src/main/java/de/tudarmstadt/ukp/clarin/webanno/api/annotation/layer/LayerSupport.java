/*
 * Copyright 2018
 * Ubiquitous Knowledge Processing (UKP) Lab and FG Language Technology
 * Technische Universit√§t Darmstadt
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.tudarmstadt.ukp.clarin.webanno.api.annotation.layer;

import static java.util.Arrays.asList;

import java.util.List;
import java.util.Optional;

import org.apache.uima.resource.metadata.TypeSystemDescription;
import org.springframework.beans.factory.BeanNameAware;

import de.tudarmstadt.ukp.clarin.webanno.api.AnnotationSchemaService;
import de.tudarmstadt.ukp.clarin.webanno.api.annotation.adapter.TypeAdapter;
import de.tudarmstadt.ukp.clarin.webanno.api.annotation.rendering.Renderer;
import de.tudarmstadt.ukp.clarin.webanno.model.AnnotationFeature;
import de.tudarmstadt.ukp.clarin.webanno.model.AnnotationLayer;
import de.tudarmstadt.ukp.clarin.webanno.model.Project;

public interface LayerSupport<T extends TypeAdapter>
    extends BeanNameAware
{
    Object getId();

    /**
     * Checks whether the given layer is provided by the current layer support.
     * 
     * @param aLayer
     *            a layer definition.
     * @return whether the given layer is provided by the current layer support.
     */
    boolean accepts(AnnotationLayer aLayer);

    /**
     * Get the layer type for the given annotation layer. If the current layer support does
     * not provide any layer type for the given layer, an empty value is returned. As we
     * usually use {@link LayerType} objects in layer type selection lists, this method is
     * helpful in obtaining the selected value of such a list from the {@link AnnotationLayer}
     * object being edited.
     * 
     * @param aLayer
     *            a layer definition.
     * @return the corresponding layer type.
     */
    default Optional<LayerType> getLayerType(AnnotationLayer aLayer)
    {
        return getSupportedLayerTypes().stream()
                .filter(t -> t.getName().equals(aLayer.getType())).findFirst();
    }
        
    List<LayerType> getSupportedLayerTypes();

    /**
     * Create an adapter for the given annotation layer.
     * 
     * @param aLayer
     *            the annotation layer.
     * @return the adapter.
     */
    T createAdapter(AnnotationLayer aLayer);

    /**
     * Add the types required for this layer to the given type system.
     * 
     * @param aTsd
     *            the type system description to which to add the generated types and features.
     * @param aLayer
     *            the layer for which to generate the types and features (one layer can cause
     *            multiple types to be generated, each layer can have multiple features).
     * @param aAllFeaturesInProject
     *            a list of all features defined in the project. Providing this list here avoids
     *            having to fetch the features for every layer which can lead to database hammering.
     *            Just call {@link AnnotationSchemaService#listAnnotationFeature(Project)} once
     *            before generating types for one or more layers.
     */
    void generateTypes(TypeSystemDescription aTsd, AnnotationLayer aLayer,
            List<AnnotationFeature> aAllFeaturesInProject);

    /**
     * Gets the names of the UIMA types which are generated by the given layer.
     */
    default List<String> getGeneratedTypeNames(AnnotationLayer aLayer)
    {
        return asList(aLayer.getName());
    }

    Renderer getRenderer(AnnotationLayer aLayer);
}
